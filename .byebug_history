c
readings >= 4
readings = self.class.where(user_id: self.user_id, date: self.date).count
self.class.where(user_id: self.user_id, date: self.date).count
self.date = Time.now.beginning_of_day
readings
Reading.all
c
Reading.all
Reading.all.count
c
self.user_id
q
self
self.date
self.user_id
    readings = self.class.where(user_id: self.user_id, date: self.date).count
Reading.all.count
Reading.all
c
q
Reading.all
q
Reading.all
self
self.class.where(user_id: self.user_id, date: self.date)
self.class.where(user_id: self.user_id, date: self.date).count
    self.date = Time.now.beginning_of_day
expect(reading).to_not be_valid
reading
reading.date = nil
reading
c
readings.average(:reading).to_f
readings.maximum(:reading)
readings.minimum(:reading)
c
q
t
aa.update_attribute(:date, t)
aa.update_attributes!(:date, t)
aa.update_attribute!(:date, t)
t
aa
t
aa.update_attribute(:date, t)
t
aa
t
aa
aa.update_attribute(:date, t)
aa.update_attribute(date: t)
aa.update_attrbutes(date: t)
aa
t
aa.update(date: t)
t
aa
aa.update(date: t)
t.to_s
t
aa
q
c
q
readings
c
q
readings
q
self.readings
c
q
user.readings
c
q
Reading.all
self.readings.pluck(:date)
q
self.readings
self.reading
q
Time.now.months_since(-1).beginning_of_month
Time.now.months_since(-1)
date
date.month.ago
date.month
date.ago
date/ago
date
time
date
1.month.ago.beginning_of_month.to_s
1.month.ago.beginning_of_month
1.month.ago.to_s.beginning_of_month
1.month.ago.to_s
1.month.ago
1.month.ago.beginning_of_month
1.month.ago
1.month.before_now
1.month.from_now
 date.beginning_of_month
avg = readings.average(:reading).to_f
max = readings.maximum(:reading)
min = readings.minimum(:reading)
c
date.beginning_of_month
self.readings
self.readings.where('date >= :start_date', start_date: date.beginning_of_month).count
self.readings.where('date >= :start_date', start_date: date.beginning_of_month)
c
q
daily_report
c
readings
q
time.end_of_month.beginning_of_day
      time = Time.now
date.end_of_month.beginning_of_day
date.end_of_month
date.end_of_month.beginning_of_day
 date.beginning_of_month
self.readings
self.readings.where('date >= :start_date and date <= :end_date')
self.readings
q
Time.now + 10
Time.now = 10
time + 10Time.now
time
10
(time + 10)
(time + 10).middle_of_day
(time + 10).at_middle_of_day
(time + 10).at_middle_of_month
time.at_middle_of_month
time.at_end_of_month
time.middle_of_day  + 10
time.middle_of_day 
time.
time.middle_of_day
time
time.middle_of_day
time.middle_of_month
time.end_of_month
time.beginning_of_month + 2
time.beginning_of_month + 1
time.beginning_of_month
c
      expect(daily_report).to eq({:min=>0, :max=>2, :avg=>1.0})
daily_report
daily_report.is_a?(Hash)
daily_report.values
daily_report.keys
daily_report
c
readings.minimum(:reading)
readings.maximum(:reading)
readings.average(:reading).to_f
readings = send("#{report_type}_report".to_sym, date)
q
readings.average(:reading).to_f
readings.maximum(:reading)
readings.minimum(:reading)
readings = send("#{report_type}_report".to_sym, date)
 send("#{report_type}_report".to_sym, date)
c
 self.readings
c
 readings = send("#{report_type}_report".to_sym, date)
readings = send("#{report_type}_report".to_sym, date)
report_type
q
readings
ActiveRecord::AssociationRelation.new([],[])
ActiveRecord::AssociationRelation.new([])
ActiveRecord::AssociationRelation.new(1,2)
ActiveRecord::AssociationRelation.new()
ActiveRecord::AssociationRelation.new
ActiveRecord::AssociationRelation
readings.minimum()
readings.minimum
readings
readings.minimum(:reading)
[time.beginning_of_day, time.middle_of_day,  time.end_of_day]
self.readings
[time.beginning_of_day, time.middle_of_day,  time.end_of_day]
      time = Time.now
readings = send("#{report_type}_report".to_sym, date)
q
Time.now.end_of_day
Time.now.beginning_of_day
readings.count
readings
readings.average(:reading).to_f
readings.maximum(:reading)
readings.minimum
readings
min = readings.minimum(:reading)
 readings = send("#{report_type}_report".to_sym, date)
send("#{report_type}_report".to_sym, date)
report_type
date
c
q
aa = Time.now.beginning_of_month
 Time.parse(aa).beginning_of_day
 Time.parse(aa)
aa = Time.now.to_s
Time.now.to_s
Time.now.beginning_of_day
 Time.now.beginning_of_month
 Time.now.end_of_month.beginning_of_day
 Time.now.end_of_month
 Time.now
self.readings.where(date: Time.now.beginning_of_day)
self.readings
q
Reading
readings
c
q
Time.now.beginning_of_day
self.readings
self
q
category
User.all
q
FactoryBot.create(:user)
User.all
category
q
category
User.all
q
      expect(category).to be_valid
User.all
category
q
User.all
subject
q
create(:user)
User.all
user1
q
FactoryBot.create(:user)
User.all
q
User.all
user
c
is_expected.to validate_presence_of(:name)
name
q
